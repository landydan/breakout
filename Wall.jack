
/******************************************************************************************** 
The wall, made up of bricks that disappear when hit by the ball.  
This is a simple implementation that does not allow for much customization
in terms of number and dimensions of bricks, etc.
The "brickHeight" could be specified, but the user-interface does not provide that option currently.

A 2-dimensional array is used to keep track of which bricks exist and which have been removed.
Originally I tried doing it without this array -- determining whether a brick was there by looking
directly at the memory representing it on screen.  But this proved to be not robust, because the
ball itself would sometimes get in the way.
*********************************************************************************************/

class Wall {

   field int rows, brickHeight, brickWidth, bricksPerRow; 
   field int topY, bottomY;
   field Pixel pixel;
   field int brickCount;
   field Array bricks;

   constructor Wall new(int r, int bh) {
      // choose a width that's a divisor of 512, for simplicity
      // harcoding the width at 16 because it's a convenient number for graphics optimization
      let brickWidth = 16;
      let bricksPerRow = 512/brickWidth;

      // also hardcoding the space above the wall, for now
      let topY = 50;

      let rows = r;
      let brickHeight = bh;

      // cache this value so we don't need to keep recalculating it
      let bottomY = topY + (rows * brickHeight) - 1;

      let brickCount = 0;
      do createWall();
      let pixel = Pixel.new();
      return this;
   }

   method void createWall() {
      var int rowCounter;
      let rowCounter = 0;
      let bricks = Array.new(rows);

      while (rowCounter < rows) {
         let bricks[rowCounter] = createRow(rowCounter);
	 let rowCounter = rowCounter + 1;
      }
      return;
   }

   method Array createRow(int rowCounter) {
      var int brickNumber;
      var Array brickRow;

      let brickRow = Array.new(bricksPerRow);      
      let brickNumber = 0;
      while (brickNumber < bricksPerRow) {
         do drawBrick(rowCounter, brickNumber, true);
	 let brickRow[brickNumber] = true;
	 let brickNumber = brickNumber + 1;
	 // keep a running total
	 let brickCount = brickCount + 1;
      }
      return brickRow;
   }


   method void drawBrick(int row, int brickNumber, boolean color) {
      var int topLeftX, topLeftY;
      do Screen.setColor(color);
      let topLeftX = brickNumber * brickWidth;
      let topLeftY = topY + (row * brickHeight);
      do Screen.drawRectangle(topLeftX, topLeftY, topLeftX + brickWidth - 1, topLeftY + brickHeight - 1);
      return;
   }


   /******************************************************************************************** 
   Find the brick at the given point and if it exists, erase it and mark it so.
   Return true in this case, so the caller knows to bounce the ball.   
   To erase the brick we find it with some arithmetic and then call the draw method
   with color off.
   ********************************************************************************************/
   
   method boolean hitBrickAtPoint(int x, int y) {
      var int row;
      var int brickNumber;
      var array rowArray;

      // out of range, so don't bother looking for the brick
      if ((y > bottomY) | (y < topY)) {
         return false;
      }	 
      let row = (y - topY)/brickHeight;
      let brickNumber = x/brickWidth;      
      let rowArray = bricks[row];
      if (rowArray[brickNumber]) {
         // erase the brick and return 0
	 let rowArray[brickNumber] = false;
	 do drawBrick(row, brickNumber, false);
	 let brickCount = brickCount - 1;
         return true;
      } else {
         return false;
      }  
   }

   method boolean bricksRemain() {
      return (brickCount > 0);
   }

   method void dispose() {
      var int k;
      var Array rowArray;

      let k = 0;
      while (k < rows) {
         let rowArray = bricks[k];
	 do rowArray.dispose();
	 let k = k + 1;
      }
      do bricks.dispose();        	  
      do Memory.deAlloc(this);
      return;
   }

}

