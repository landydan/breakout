/**
Utility methods for calculating the value of a pixel.
*/

class Pixel {

   /**
   *  Cached array of the 16 numbers that contain a single 1
   *  in their binary representation.
   *  So oneBit[] = [1,2,4,8 . . .]
   *  This is used to calculate the value of a single bit in a 16-bit word.
   */   
   field Array oneBit; 

   /**
   *  Initialize the oneBit array by initializing the first bit to 1, 
      then doubling that value in each iteration for the subsequent bits.
   */
   constructor Pixel new() {
      var int k;
      var int currentValue;
      let oneBit = Array.new(16);
      let k = 0;
      let currentValue = 1;
      while (k < 16) {
         let oneBit[k] = currentValue;
	 let k = k + 1;
         let currentValue = currentValue * 2;
      }
      
      return this;
   }

   /**
      Perform a bit-wise AND of the argument and the number
      with a single 1 in the kth position of the oneBit array. 	
   */

   method int getBitAtIndex(int number, int k) {
      var int result;
      let result = 0;	  
      if ((number & oneBit[k]) > 0) {
         let result = 1;
      }
      return result;
   }


}
