
/** Testing */
class Controller {

   field char leftKey, rightKey, quitKey;
   field int xDelta, yDelta;
   field int delay;   
   field Ball ball;
   field Paddle paddle;
   field Wall wall;

   constructor Controller new(int pw, int d) {
      var int paddleWidth, paddleHeight;
      let paddleWidth = pw;
      let paddleHeight = 5;
      let delay = d;

      let leftKey = 130;
      let rightKey = 132;
      let xDelta = 1;
      let yDelta = 2;      

      let ball = Ball.new(100,100,8);
      let paddle = Paddle.new(paddleWidth, paddleHeight);
      let wall = Wall.new(5, 8, 0);
      return this;
   }


   method void play() {
       var char key;  
       var boolean ballInPlay, exit;
       let exit = false;
       let ballInPlay = true;

      while (~exit) {
         // waits for a key to be pressed
         while (ballInPlay & (key = 0)) {
	    let ballInPlay = moveBall();   
            let key = Keyboard.keyPressed();
         }

         if (key = leftKey) { 
	    do paddle.moveLeft();
	 }
         if (key = rightKey) { 
	    do paddle.moveRight();
	 }
	 let ballInPlay = moveBall();
	 let exit = ~ballInPlay;
	 let key = 0;  
     }		 

	do ball.dispose();
      	return;
    }

    method boolean moveBall() {
    	
	// these represent the anticipated new "corners" of the ball if
	// it continues to move in the current direction   
	var int leftX, leftY, rightX, rightY, topX, topY, bottomX, bottomY;	
	var boolean ballInPlay;

	let ballInPlay = true;
	let leftX = ball.getLeftX() + xDelta;
	let leftY = ball.getLeftY() + yDelta;
	let rightX = ball.getRightX() + xDelta;
	let rightY = ball.getRightY() + yDelta;
	let topX = ball.getTopX() + xDelta;
	let topY = ball.getTopY() + yDelta;
	let bottomX = ball.getBottomX() + xDelta;
	let bottomY = ball.getBottomY() + yDelta;

	// ball is hitting the left or right side border, so reverse its x direction
	if ((leftX < 1) | (rightX > 511)) {
	   let xDelta = -xDelta;
	}   

	// ball is hitting the top border
    	if (topY < 1) {
	   let yDelta = -yDelta;
	}   
	
	// ball is moving left and hits the wall on its left side
	if ((xDelta < 0) & (wall.hitBrickAtPoint(leftX, leftY))) {
	   let xDelta = - xDelta;         
	} else {
	   // ball is moving right and hits the wall on its right side
	   if ((xDelta > 0) & (wall.hitBrickAtPoint(rightX, rightY))) {
	      let xDelta = - xDelta;         
	   }
	}

	// ball is moving up and hits the wall on its top edge
	if ((yDelta < 0) & (wall.hitBrickAtPoint(topX, topY))) {
	   let yDelta = - yDelta;         
	} else {
	   // ball is moving down and hits the wall on its bottom edge
	   if ((yDelta > 0) & (wall.hitBrickAtPoint(bottomX, bottomY))) {
	      let yDelta = - yDelta;         
	   }
	}


	// ball is hitting the paddle
	if ((bottomY > (254 - paddle.getHeight())) & (bottomX > (paddle.getLeftX() - 1)) & (bottomX < (paddle.getRightX() + 1)) ) {
	   let yDelta = -yDelta;
	} else {
	  // ball is hitting the ground
	   if (bottomY > 254) {
	      let ballInPlay = false;
	   }
	}
	

	// temporary debugging
	/*
	do Debug.print(19,"X", ball.getX()); 
	do Debug.print(20,"Y", ball.getY()); 
	do Debug.print(21,"XD", xDelta); 
	do Debug.print(22,"YD", yDelta); 
	*/

	if (ballInPlay) {
    	   do ball.move(xDelta, yDelta);
	   // delay
	   do Sys.wait(delay);
   	}
	return ballInPlay;
    }

   method void dispose() {
      do paddle.dispose();
      do wall.dispose();
      do Memory.deAlloc(this);
      return;
   }

}
