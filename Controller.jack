
/** Testing */
class Controller {

   field char leftKey, rightKey, quitKey;
   field int xDelta, yDelta;   
   field Ball ball;
   field Paddle paddle;
   field Wall wall;

   constructor Controller new() {
      var int paddleWidth;
      let leftKey = 130;
      let rightKey = 132;
      let quitKey = 81;
      let xDelta = 1;
      let yDelta = 2;      

      let ball = Ball.new(100,100,8);
      let paddleWidth = 50;
      let paddle = Paddle.new(250,250,paddleWidth);
      let wall = Wall.new(5, 8, 0);
      return this;
   }


   method void play() {
       var char key;  
       var boolean exit;
       let exit = false;

      while (~exit) {
         // waits for a key to be pressed
         while (key = 0) {
	    do moveBall();   
            let key = Keyboard.keyPressed();
         }
     	 // q for quit
         if (key = quitKey)  { 
	    let exit = true; 
	 }

         if (key = leftKey) { 
	    do paddle.moveLeft();
	 }
         if (key = rightKey) { 
	    do paddle.moveRight();
	 }
	 do moveBall();
	let key = 0;  
     }		 

	do ball.dispose();
      	return;
    }

    method void moveBall() {
    	
	// these represent the anticipated new "corners" of the ball if
	// it continues to move in the current direction   
	var int leftX, leftY, rightX, rightY, topX, topY, bottomX, bottomY;

	let leftX = ball.getLeftX() + xDelta;
	let leftY = ball.getLeftY() + yDelta;
	let rightX = ball.getRightX() + xDelta;
	let rightY = ball.getRightY() + yDelta;
	let topX = ball.getTopX() + xDelta;
	let topY = ball.getTopY() + yDelta;
	let bottomX = ball.getBottomX() + xDelta;
	let bottomY = ball.getBottomY() + yDelta;

	// ball is hitting the left or right side border, so reverse its x direction
	if ((leftX < 1) | (rightX > 511)) {
	   let xDelta = -xDelta;
	}   

	// ball is hitting the top or bottom border
    	if ((topY < 1) | (bottomY > 254)) {
	   let yDelta = -yDelta;
	}   
	
	// ball is moving left and hits the wall on its left side
	if ((xDelta < 0) & (wall.hitBrickAtPoint(leftX, leftY))) {
	   let xDelta = - xDelta;         
	}

	// ball is moving right and hits the wall on its right side
	if ((xDelta > 0) & (wall.hitBrickAtPoint(rightX, rightY))) {
	   let xDelta = - xDelta;         
	}

	// ball is moving up and hits the wall on its top edge
	if ((yDelta < 0) & (wall.hitBrickAtPoint(topX, topY))) {
	   let yDelta = - yDelta;         
	}

	// ball is moving down and hits the wall on its bottom edge
	if ((yDelta > 0) & (wall.hitBrickAtPoint(bottomX, bottomY))) {
	   let yDelta = - yDelta;         
	}

	// temporary debugging
	do Debug.print(19,"X", ball.getX()); 
	do Debug.print(20,"Y", ball.getY()); 
	do Debug.print(21,"XD", xDelta); 
	do Debug.print(22,"YD", yDelta); 

    	do ball.move(xDelta, yDelta);   
      	// delay
	do Sys.wait(10);
	return;
    }

   method void dispose() {
      do paddle.dispose();
      do wall.dispose();
      do Memory.deAlloc(this);
      return;
   }

}
