
/******************************************************************************************** 
The main class for creating the game assets (wall, paddle, balls) and controlling the action.
********************************************************************************************/

class Controller {

   field char leftKey, rightKey;
   field int xDelta, yDelta;
   field int delay;   
   field Ball ball;
   field Paddle paddle;
   field Wall wall;  
   field int ballRadius; 

/******************************************************************************************** 
Build the wall and the paddle and set initial parameters
********************************************************************************************/

   constructor Controller new(int pw, int d) {
      var int paddleWidth, paddleHeight;
      let paddleWidth = pw;
      let paddleHeight = 5;
      let delay = d;

      let leftKey = 130;
      let rightKey = 132;

      let paddle = Paddle.new(paddleWidth, paddleHeight);
      let wall = Wall.new(5, 8);
      let ballRadius = 8;
      return this;
   }


/******************************************************************************************** 
Loop through the number of balls and launch the action for each new ball,
as long as the wall still exists.
********************************************************************************************/

   method boolean play() {
      var int totalBalls, ballCounter;
      var String message;
      var char counterString;

      let totalBalls = 3;
      let ballCounter = 1;

      while ((wall.bricksRemain()) & (ballCounter < (totalBalls + 1))) {
         let message = "Ball Number  ";  
	 do message.setCharAt(12, (48 + ballCounter));    	    
         do Printer.showMessage(0, message);
	 do Sys.wait(1000);
	 do Printer.showMessage(0, "               ");
         do playOneBall();
	 let ballCounter = ballCounter + 1;
      } 
      return ~(wall.bricksRemain());	  
   }


/******************************************************************************************** 
This is where the action happens.
As long as the current ball is in play, keep it moving by calling the moveBall method.
Also listen for keypresses from the user, and move the paddle left and right accordingly.
********************************************************************************************/

   method void playOneBall() {
      var char key;  
      var boolean ballInPlay, exit;
      var int startX;
      

      // position the ball above the left edge of the paddle
      let startX = paddle.getLeftX();
      if (startX < (ballRadius + 1)) {
         let startX = ballRadius + 1;
      }
      let ball = Ball.new(startX, 100, ballRadius);

      let xDelta = 1;
      let yDelta = 2;      

      let ballInPlay = true; 	   
      while (ballInPlay) {
         // waits for a key to be pressed
         while (ballInPlay & (key = 0)) {
	    let ballInPlay = moveBall();   
            let key = Keyboard.keyPressed();
         }

	 if (ballInPlay) {
            if (key = leftKey) { 
	       do paddle.moveLeft();
	    }
            if (key = rightKey) { 
	       do paddle.moveRight();
	    }
	    let ballInPlay = moveBall();
	 }
	 let key = 0;  
     }
        do ball.erase();		 
	do ball.dispose();
      	return;
    }

/******************************************************************************************** 
Move the ball according to its current direction coordinates.
Handle the following events:
      Hitting the side borders and bouncing off.
      Hitting the wall and bouncing off (the wall will handle the brick removal).
      Hitting the paddle and bouncing off.
      Hitting the ground and stopping.
Return true if the ball is still in play.
********************************************************************************************/

    method boolean moveBall() {
    	
	// these represent the anticipated new "corners" of the ball if
	// it continues to move in the current direction   
	var int leftX, leftY, rightX, rightY, topX, topY, bottomX, bottomY;	
	var boolean ballInPlay;

	let ballInPlay = true;
	let leftX = ball.getLeftX() + xDelta;
	let leftY = ball.getLeftY() + yDelta;
	let rightX = ball.getRightX() + xDelta;
	let rightY = ball.getRightY() + yDelta;
	let topX = ball.getTopX() + xDelta;
	let topY = ball.getTopY() + yDelta;
	let bottomX = ball.getBottomX() + xDelta;
	let bottomY = ball.getBottomY() + yDelta;

	// ball is hitting the left or right side border, so reverse its x direction
	if ((leftX < 1) | (rightX > 511)) {
	   let xDelta = -xDelta;
	}   

	// ball is hitting the top border
    	if (topY < 1) {
	   let yDelta = -yDelta;
	}   
	
	// ball is moving left and hits the wall on its left side
	if ((xDelta < 0) & (wall.hitBrickAtPoint(leftX, leftY))) {
	   let xDelta = - xDelta;         
	} else {
	   // ball is moving right and hits the wall on its right side
	   if ((xDelta > 0) & (wall.hitBrickAtPoint(rightX, rightY))) {
	      let xDelta = - xDelta;         
	   }
	}

	// ball is moving up and hits the wall on its top edge
	if ((yDelta < 0) & (wall.hitBrickAtPoint(topX, topY))) {
	   let yDelta = - yDelta;         
	} else {
	   // ball is moving down and hits the wall on its bottom edge
	   if ((yDelta > 0) & (wall.hitBrickAtPoint(bottomX, bottomY))) {
	      let yDelta = - yDelta;         
	   }
	}

	// ball is moving down and hitting the paddle
	// there is a bit of fudge factor here for the case where the ball is hitting the paddle right at the corners.
	if ((yDelta > 0) &  (bottomY > (254 - paddle.getHeight())) & (bottomX > (paddle.getLeftX() - 3)) & (bottomX < (paddle.getRightX() + 3)) ) {
	   let yDelta = -yDelta;
	   // let's increase the angle if the ball is hitting the paddle near one of the ends
	   if (paddle.isNearEnd(bottomX)) {
	      if (xDelta > 0) {
	         let xDelta = 2;
	      } else {
	         let xDelta = -2;
	      }
           } else {
	      if (xDelta > 0) {
	         let xDelta = 1;
	      } else {
	         let xDelta = -1;
              }
           }
	} else {
	  // ball is hitting the ground
	   if (bottomY > 254) {
	      let ballInPlay = false;
	   }
	}

	// temporary debugging
	/*
	do Printer.debug(19,"X", ball.getX()); 
	do Printer.debug(20,"Y", ball.getY()); 
	do Printer.debug(21,"XD", xDelta); 
	do Printer.debug(22,"YD", yDelta); 
	*/

	let ballInPlay = (ballInPlay & (wall.bricksRemain()));

	if (ballInPlay) {
    	   do ball.move(xDelta, yDelta);
	   // delay
	   do Sys.wait(delay);
   	}
	return ballInPlay;
    }

   method void dispose() {
      do paddle.dispose();
      do wall.dispose();
      do Memory.deAlloc(this);
      return;
   }

}
